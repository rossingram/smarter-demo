{
	"swagger": "2.0",
	"info": {
		"description": "Hi there - You can find out more about Smarter Sorting at [https://smartersorting.com](https://smartersorting.com) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
		"version": "1.0.6",
		"title": "Smarter Shipping APIs",
		"termsOfService": "http://swagger.io/terms/",
		"contact": {
			"email": "#"
		},
		"license": {
			"name": "Apache 2.0",
			"url": "http://www.apache.org/licenses/LICENSE-2.0.html"
		}
	},
	"host": "rossingram.github.io",
	"basePath": "/v2",
	"tags": [{
			"name": "ship-battery",
			"description": "Returns marks and labels required to ship a battery based on its attributes",
			"externalDocs": {
				"description": "Find out more",
				"url": "https://smartersorting.com"
			}
		},
		{
			"name": "ship-ocean",
			"description": "Returns shipping papers for ocean senarios"
		}
	],
	"schemes": [
		"https",
		"http"
	],
	"paths": {
		"/ship-battery/{ship-batteryId}/uploadImage": {
			"post": {
				"tags": [
					"battery"
				],
				"summary": "uploads an image",
				"description": "",
				"operationId": "uploadFile",
				"consumes": [
					"multipart/form-data"
				],
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ship-batteryId",
						"in": "path",
						"description": "ID of ship-battery to update",
						"required": true,
						"type": "integer",
						"format": "int64"
					},
					{
						"name": "additionalMetadata",
						"in": "formData",
						"description": "Additional data to pass to server",
						"required": false,
						"type": "string"
					},
					{
						"name": "file",
						"in": "formData",
						"description": "file to upload",
						"required": false,
						"type": "file"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/ApiResponse"
						}
					}
				},
				"security": [{
					"batstore_auth": [
						"write:bats",
						"read:bats"
					]
				}]
			}
		},
		"/ship-battery": {
			"post": {
				"tags": [
					"ship-battery"
				],
				"summary": "Add a new ship-battery to the database",
				"description": "",
				"operationId": "addship-battery",
				"consumes": [
					"application/json",
					"application/xml"
				],
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "ship-battery object that needs to be added to the store",
					"required": true,
					"schema": {
						"$ref": "#/definitions/ship-battery"
					}
				}],
				"responses": {
					"405": {
						"description": "Invalid input"
					}
				},
				"security": [{
					"ship-batterystore_auth": [
						"write:ship-batterys",
						"read:ship-batterys"
					]
				}]
			},
			"put": {
				"tags": [
					"ship-battery"
				],
				"summary": "Update an existing bat",
				"description": "",
				"operationId": "updatebat",
				"consumes": [
					"application/json",
					"application/xml"
				],
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "bat object that needs to be added to the store",
					"required": true,
					"schema": {
						"$ref": "#/definitions/bat"
					}
				}],
				"responses": {
					"400": {
						"description": "Invalid ID supplied"
					},
					"404": {
						"description": "bat not found"
					},
					"405": {
						"description": "Validation exception"
					}
				},
				"security": [{
					"batstore_auth": [
						"write:bats",
						"read:bats"
					]
				}]
			}
		},
		"/bat/findByStatus": {
			"get": {
				"tags": [
					"bat"
				],
				"summary": "Finds bats by status",
				"description": "Multiple status values can be provided with comma separated strings",
				"operationId": "findbatsByStatus",
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [{
					"name": "status",
					"in": "query",
					"description": "Status values that need to be considered for filter",
					"required": true,
					"type": "array",
					"items": {
						"type": "string",
						"enum": [
							"available",
							"pending",
							"sold"
						],
						"default": "available"
					},
					"collectionFormat": "multi"
				}],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/bat"
							}
						}
					},
					"400": {
						"description": "Invalid status value"
					}
				},
				"security": [{
					"batstore_auth": [
						"write:bats",
						"read:bats"
					]
				}]
			}
		},
		"/bat/findByTags": {
			"get": {
				"tags": [
					"bat"
				],
				"summary": "Finds bats by tags",
				"description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
				"operationId": "findbatsByTags",
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [{
					"name": "tags",
					"in": "query",
					"description": "Tags to filter by",
					"required": true,
					"type": "array",
					"items": {
						"type": "string"
					},
					"collectionFormat": "multi"
				}],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/bat"
							}
						}
					},
					"400": {
						"description": "Invalid tag value"
					}
				},
				"security": [{
					"batstore_auth": [
						"write:bats",
						"read:bats"
					]
				}],
				"deprecated": true
			}
		},
		"/bat/{batId}": {
			"get": {
				"tags": [
					"bat"
				],
				"summary": "Find bat by ID",
				"description": "Returns a single bat",
				"operationId": "getbatById",
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [{
					"name": "batId",
					"in": "path",
					"description": "ID of bat to return",
					"required": true,
					"type": "integer",
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/bat"
						}
					},
					"400": {
						"description": "Invalid ID supplied"
					},
					"404": {
						"description": "bat not found"
					}
				},
				"security": [{
					"api_key": [

					]
				}]
			},
			"post": {
				"tags": [
					"bat"
				],
				"summary": "Updates a bat in the store with form data",
				"description": "",
				"operationId": "updatebatWithForm",
				"consumes": [
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [{
						"name": "batId",
						"in": "path",
						"description": "ID of bat that needs to be updated",
						"required": true,
						"type": "integer",
						"format": "int64"
					},
					{
						"name": "name",
						"in": "formData",
						"description": "Updated name of the bat",
						"required": false,
						"type": "string"
					},
					{
						"name": "status",
						"in": "formData",
						"description": "Updated status of the bat",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"405": {
						"description": "Invalid input"
					}
				},
				"security": [{
					"batstore_auth": [
						"write:bats",
						"read:bats"
					]
				}]
			},
			"delete": {
				"tags": [
					"bat"
				],
				"summary": "Deletes a bat",
				"description": "",
				"operationId": "deletebat",
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [{
						"name": "api_key",
						"in": "header",
						"required": false,
						"type": "string"
					},
					{
						"name": "batId",
						"in": "path",
						"description": "bat id to delete",
						"required": true,
						"type": "integer",
						"format": "int64"
					}
				],
				"responses": {
					"400": {
						"description": "Invalid ID supplied"
					},
					"404": {
						"description": "bat not found"
					}
				},
				"security": [{
					"batstore_auth": [
						"write:bats",
						"read:bats"
					]
				}]
			}
		},
		"/store/order": {
			"post": {
				"tags": [
					"store"
				],
				"summary": "Place an order for a pet",
				"description": "",
				"operationId": "placeOrder",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "order placed for purchasing the pet",
					"required": true,
					"schema": {
						"$ref": "#/definitions/Order"
					}
				}],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/Order"
						}
					},
					"400": {
						"description": "Invalid Order"
					}
				}
			}
		},
		"/store/order/{orderId}": {
			"get": {
				"tags": [
					"store"
				],
				"summary": "Find purchase order by ID",
				"description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
				"operationId": "getOrderById",
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [{
					"name": "orderId",
					"in": "path",
					"description": "ID of pet that needs to be fetched",
					"required": true,
					"type": "integer",
					"maximum": 10,
					"minimum": 1,
					"format": "int64"
				}],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/Order"
						}
					},
					"400": {
						"description": "Invalid ID supplied"
					},
					"404": {
						"description": "Order not found"
					}
				}
			},
			"delete": {
				"tags": [
					"store"
				],
				"summary": "Delete purchase order by ID",
				"description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
				"operationId": "deleteOrder",
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [{
					"name": "orderId",
					"in": "path",
					"description": "ID of the order that needs to be deleted",
					"required": true,
					"type": "integer",
					"minimum": 1,
					"format": "int64"
				}],
				"responses": {
					"400": {
						"description": "Invalid ID supplied"
					},
					"404": {
						"description": "Order not found"
					}
				}
			}
		},
		"/store/inventory": {
			"get": {
				"tags": [
					"store"
				],
				"summary": "Returns pet inventories by status",
				"description": "Returns a map of status codes to quantities",
				"operationId": "getInventory",
				"produces": [
					"application/json"
				],
				"parameters": [

				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "object",
							"additionalProperties": {
								"type": "integer",
								"format": "int32"
							}
						}
					}
				},
				"security": [{
					"api_key": [

					]
				}]
			}
		},
		"/user/createWithArray": {
			"post": {
				"tags": [
					"user"
				],
				"summary": "Creates list of users with given input array",
				"description": "",
				"operationId": "createUsersWithArrayInput",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "List of user object",
					"required": true,
					"schema": {
						"type": "array",
						"items": {
							"$ref": "#/definitions/User"
						}
					}
				}],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/user/createWithList": {
			"post": {
				"tags": [
					"user"
				],
				"summary": "Creates list of users with given input array",
				"description": "",
				"operationId": "createUsersWithListInput",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "List of user object",
					"required": true,
					"schema": {
						"type": "array",
						"items": {
							"$ref": "#/definitions/User"
						}
					}
				}],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/user/{username}": {
			"get": {
				"tags": [
					"user"
				],
				"summary": "Get user by user name",
				"description": "",
				"operationId": "getUserByName",
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [{
					"name": "username",
					"in": "path",
					"description": "The name that needs to be fetched. Use user1 for testing. ",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/User"
						}
					},
					"400": {
						"description": "Invalid username supplied"
					},
					"404": {
						"description": "User not found"
					}
				}
			},
			"put": {
				"tags": [
					"user"
				],
				"summary": "Updated user",
				"description": "This can only be done by the logged in user.",
				"operationId": "updateUser",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [{
						"name": "username",
						"in": "path",
						"description": "name that need to be updated",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Updated user object",
						"required": true,
						"schema": {
							"$ref": "#/definitions/User"
						}
					}
				],
				"responses": {
					"400": {
						"description": "Invalid user supplied"
					},
					"404": {
						"description": "User not found"
					}
				}
			},
			"delete": {
				"tags": [
					"user"
				],
				"summary": "Delete user",
				"description": "This can only be done by the logged in user.",
				"operationId": "deleteUser",
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [{
					"name": "username",
					"in": "path",
					"description": "The name that needs to be deleted",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"400": {
						"description": "Invalid username supplied"
					},
					"404": {
						"description": "User not found"
					}
				}
			}
		},
		"/user/login": {
			"get": {
				"tags": [
					"user"
				],
				"summary": "Logs user into the system",
				"description": "",
				"operationId": "loginUser",
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [{
						"name": "username",
						"in": "query",
						"description": "The user name for login",
						"required": true,
						"type": "string"
					},
					{
						"name": "password",
						"in": "query",
						"description": "The password for login in clear text",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"headers": {
							"X-Expires-After": {
								"type": "string",
								"format": "date-time",
								"description": "date in UTC when token expires"
							},
							"X-Rate-Limit": {
								"type": "integer",
								"format": "int32",
								"description": "calls per hour allowed by the user"
							}
						},
						"schema": {
							"type": "string"
						}
					},
					"400": {
						"description": "Invalid username/password supplied"
					}
				}
			}
		},
		"/user/logout": {
			"get": {
				"tags": [
					"user"
				],
				"summary": "Logs out current logged in user session",
				"description": "",
				"operationId": "logoutUser",
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [

				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/user": {
			"post": {
				"tags": [
					"user"
				],
				"summary": "Create user",
				"description": "This can only be done by the logged in user.",
				"operationId": "createUser",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "Created user object",
					"required": true,
					"schema": {
						"$ref": "#/definitions/User"
					}
				}],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		}
	},
	"securityDefinitions": {
		"api_key": {
			"type": "apiKey",
			"name": "api_key",
			"in": "header"
		},
		"petstore_auth": {
			"type": "oauth2",
			"authorizationUrl": "https://petstore.swagger.io/oauth/authorize",
			"flow": "implicit",
			"scopes": {
				"read:pets": "read your pets",
				"write:pets": "modify pets in your account"
			}
		}
	},
	"definitions": {
		"ApiResponse": {
			"type": "object",
			"properties": {
				"code": {
					"type": "integer",
					"format": "int32"
				},
				"type": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"Category": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int64"
				},
				"name": {
					"type": "string"
				}
			},
			"xml": {
				"name": "Category"
			}
		},
		"Pet": {
			"type": "object",
			"required": [
				"name",
				"photoUrls"
			],
			"properties": {
				"id": {
					"type": "integer",
					"format": "int64"
				},
				"category": {
					"$ref": "#/definitions/Category"
				},
				"name": {
					"type": "string",
					"example": "doggie"
				},
				"photoUrls": {
					"type": "array",
					"xml": {
						"wrapped": true
					},
					"items": {
						"type": "string",
						"xml": {
							"name": "photoUrl"
						}
					}
				},
				"tags": {
					"type": "array",
					"xml": {
						"wrapped": true
					},
					"items": {
						"xml": {
							"name": "tag"
						},
						"$ref": "#/definitions/Tag"
					}
				},
				"status": {
					"type": "string",
					"description": "pet status in the store",
					"enum": [
						"available",
						"pending",
						"sold"
					]
				}
			},
			"xml": {
				"name": "Pet"
			}
		},
		"Tag": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int64"
				},
				"name": {
					"type": "string"
				}
			},
			"xml": {
				"name": "Tag"
			}
		},
		"Order": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int64"
				},
				"petId": {
					"type": "integer",
					"format": "int64"
				},
				"quantity": {
					"type": "integer",
					"format": "int32"
				},
				"shipDate": {
					"type": "string",
					"format": "date-time"
				},
				"status": {
					"type": "string",
					"description": "Order Status",
					"enum": [
						"placed",
						"approved",
						"delivered"
					]
				},
				"complete": {
					"type": "boolean"
				}
			},
			"xml": {
				"name": "Order"
			}
		},
		"User": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int64"
				},
				"username": {
					"type": "string"
				},
				"firstName": {
					"type": "string"
				},
				"lastName": {
					"type": "string"
				},
				"email": {
					"type": "string"
				},
				"password": {
					"type": "string"
				},
				"phone": {
					"type": "string"
				},
				"userStatus": {
					"type": "integer",
					"format": "int32",
					"description": "User Status"
				}
			},
			"xml": {
				"name": "User"
			}
		}
	},
	"externalDocs": {
		"description": "Find out more about Swagger",
		"url": "http://swagger.io"
	}
}
